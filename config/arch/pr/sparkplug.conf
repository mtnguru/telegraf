# Telegraf Configuration
[global_tags]

[agent]
  interval = "5s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "5s"
  flush_jitter = "0s"
  precision = ""
  logtarget = "file"
  logfile = "/tmp/log"
  # logfile_rotation_interval = "0d"
  # logfile_rotation_max_size = "0MB"
  # logfile_rotation_max_archives = 5
  hostname = ""
  omit_hostname = false


###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################

#[[outputs.file]]
#  files = ["/tmp/sparkplug.influx"]
#  data_format = "influx"

[[outputs.influxdb_v2]]
  urls = ["http://your server:8086"]
  token = "your token"
  organization = "your organization"
  bucket = "your bucket"

###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################

# Uncomment this section to test starlark processor with data from epic.testdata file
#[[inputs.file]]
#  files = "./epic.influx"
#  data_format = "influx"

# Uncomment this section to receive data from MQTT broker and decode sparkplug payload
[[inputs.mqtt_consumer]]
  servers = ["tcp://your_server:1883"]
  qos = 0
  connection_timeout = "30s"
  topics = ["spBv1.0/#"]
  persistent_session = false
  client_id = ""
  username = "your username"
  password = "your password"

  # Sparkplug protobuf configuration
  data_format = "xpath_protobuf"
   
  # URL of sparkplug protobuf prototype
  xpath_protobuf_type = "org.eclipse.tahu.protobuf.Payload"
   
  # Location of sparkplug_b.proto file
  xpath_protobuf_file = "/apps/telegraf/config/sparkplug_b.proto"

  [[inputs.mqtt_consumer.xpath_protobuf]]
    metric_selection = "metrics[not(template_value)]"
    metric_name = "concat('edge', substring-after(name, ' '))"
    timestamp = "timestamp"
    timestamp_format = "unix_ms"
    [inputs.file.xpath_protobuf.tags]
      name = "substring-after(name, ' ')"
    [inputs.mqtt_consumer.xpath_protobuf.fields_int]
      type = "datatype"
      alias = "alias"
    [inputs.mqtt_consumer.xpath_protobuf.fields]
      # A metric value must be numeric
      value = "number((int_value | long_value | float_value | double_value | boolean_value))"
      name = "name"

# Starlark processor
[[processors.starlark]]
  script = "sparkplug.star"

  # Define constants used in sparkplug.star
  [processors.starlark.constants]     
    # Tags used to identify message type - 3rd field of topic
    BIRTH_TAG = "/DBIRTH/"
    DATA_TAG = "/DDATA/"

    # Number of messages to hold if alias cannot be resolved 
    MAX_UNRESOLVED = 3

    # Provide alternate names for the 5 sparkplug topic fields.  
    # The topic contains 5 fields separated by the '/' character.  
    # Define the tag name for each of these fields.
    NAMESPACE  = "false"        #0
    GROUP_ID   = "reactor"      #1
    MSG_TYPE   = "false"        #2
    EDGE_ID    = "edgeid"       #3
    DEVICE_ID  = "experiment"   #4

